{"version":3,"sources":["Area.tsx","Map.tsx","GameConsole.tsx","TopPanel.tsx","PlayersArea.tsx","javaapi.ts","Riskclient.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Area","props","myRef","hClick","e","handleClick","areaId","str","updateCanvas","ctx","current","getContext","globalAlpha","clearRect","isTargeted","isGameTargeted","fillStyle","fillRect","color","arc","Math","PI","fill","isSelected","stroke","font","plus","strokeText","React","createRef","this","ref","width","height","className","style","x","y","onClick","Component","Map","mapRef","id","src","areas","map","area","key","parseInt","handleAreaClick","selectedArea","targetAreas","includes","targetAreaId","showLinksTo","mainCanvas","allAreas","GameConsole","handleMyNameChange","event","setState","myName","target","value","handleScenarioNameChange","scenarioName","handleActionChange","action","handlemainAreaIdChange","mainAreaId","handletargetAreaIdChange","handleunitsUsedChange","unitsUsed","sendAction","state","sourceAreaId","toString","handleNameClick","setName","handleBasicChange","handleMapSave","saveMap","handleMapLoad","loadMap","greetingsBlock","scenariosBlock","playerid","label","labelFor","inline","vertical","placeholder","onChange","icon","text","interactive","elevation","Elevation","TWO","recentEvents","TopPanel","align","Alignment","LEFT","yourName","activePlayer","currentPhase","PlayersArea","players","player","name","apiClient","axios","create","baseURL","responseType","headers","getScenarioData","a","async","url","get","response","data","sendMyName","Riskclient","stompClient","showGreeting","doAction","base_area_id","target_area_id","units_used","riskServerConnect","socket","SockJS","Stomp","over","connect","frame","subscribe","d","txt","JSON","parse","body","content","log_communication","loaded","riskServerDisconnect","disconnect","dx","logdata","slice","unshift","server_sendName_old","send","stringify","server_sendName","then","game","newAction","playerId","targetArea","units","greeting","playersNow","playersNeed","current_phase","game_id","server_sendAction","target_area","player_id","console","log","length","setUserName","idx","selectedAreaId","newLinks","links","linked","i","splice","push","handleGameAreaClick","active_player","targetAreaName","strCurrentlyUsed","last_message_id","mapArea","consoleArea","TopPanelArea","playersArea","strUsed","fluid","xs","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1ad3ba4f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface AreaProps {\n    key: any\n    areaId: number\n    color: string\n    x: number\n    y: number\n    str: number\n    handleClick: any\n    isSelected: boolean\n    isTargeted: boolean\n    mainCanvas: any\n    showLinksTo: Array<number>\n    allAreas: Array<any>\n    isGameTargeted: boolean\n}\n\nexport class Area extends React.Component<AreaProps> {\n    myRef: any;\n    constructor(props:any) {\n        super(props);\n        this.myRef = React.createRef();\n    }  \n    componentDidMount() {\n        this.updateCanvas();\n    }\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    hClick = (e:any) => {\n        this.props.handleClick(this.props.areaId, this.props.str);\n    }\n\n    updateCanvas = () => {\n        const ctx = this.myRef.current.getContext('2d');\n        ctx.globalAlpha = 0.8;\n        ctx.clearRect(0,0, 30, 30);\n\n        if(this.props.isTargeted){\n            if(this.props.isGameTargeted){\n                ctx.fillStyle = \"black\";\n            }\n            else{\n                ctx.fillStyle = \"white\";\n            }\n            ctx.fillRect(0, 0, 30, 30);\n        }\n\n        ctx.fillStyle = this.props.color\n        //ctx.fillRect(this.props.x, this.props.y, 30, 30);\n\n        ctx.arc(15, 15, 15, 0, 2 * Math.PI);\n        ctx.fill();\n        \n        if(this.props.isSelected){\n            ctx.stroke();\n        }\n        \n        ctx.font = '11px serif #00ff00';\n\n        let plus:number = 0;\n        if(this.props.str>9){\n            plus = 5;\n        }\n        else{\n            plus = 8;\n        }\n        ctx.strokeText(this.props.str, 4+plus, 19);\n    }\n\n    render() {\n        return (\n            <canvas ref={this.myRef} width={30} height={30} className={\"mapCanvas\"} style={{\"left\":this.props.x, \"top\":this.props.y}} onClick={this.hClick}/>\n        );\n   }\n}","import * as React from \"react\";\nimport { Area } from './Area'\n\ninterface MapProps {\n  areas: Array<any>\n  handleAreaClick: any\n  selectedArea: number\n  targetAreas: Array<number>\n  targetAreaId: number\n}\n\nexport class Map extends React.PureComponent<MapProps> {\n  /*\n            <Button\n                rightIcon=\"arrow-left\"\n                text=\"Preču Šabloni\"\n            />*/\n  \n  mapRef: any;\n  constructor(props:any) {\n      super(props);\n      this.mapRef = React.createRef();\n  }  \n/*\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n  updateCanvas = () => {\n    const cva = this.mapRef.current.getContext('2d');\n    cva.clearRect(0,0, cva.width, cva.height);\n   \n\n    if(this.props.targetAreas.length>0 && this.props.selectedArea!=999){\n      this.props.targetAreas.forEach((areaId:number, index:number) => {\n        cva.beginPath();\n          cva.moveTo(this.props.areas[this.props.selectedArea].x+11, this.props.areas[this.props.selectedArea].y+19);\n          cva.lineTo(this.props.areas[areaId].x+11,this.props.areas[areaId].y+19);\n          cva.stroke();\n      });\n    }\n  }    */\n  public render() {\n    return (\n<div id={\"mapID\"}>\n      <img src=\"map.jpg\"/>\n      <canvas ref={this.mapRef} width={857} height={600} className={\"mainCanvas\"} style={{\"left\":0, \"top\":0}}/>\n      {this.props.areas.map((area:any, id:number) => (\n      <Area\n        key={\"area\"+id}\n        color={area.color}\n        x={parseInt(area.x)}\n        y={parseInt(area.y)}\n        str={parseInt(area.str)}\n        areaId={parseInt(area.id)}\n        handleClick={this.props.handleAreaClick}\n        isSelected={(id==this.props.selectedArea)?true:false}\n        isTargeted={this.props.targetAreas.includes(id)?true:false}\n        isGameTargeted={(this.props.targetAreaId == id)?true:false}\n        showLinksTo={(id==this.props.selectedArea)?this.props.targetAreas:[]}\n        mainCanvas={this.mapRef}\n        allAreas={this.props.areas}\n      />\n     ))}\n</div>\n    );\n\n    return (\n        <>\n        </>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n    Button, FormGroup, ControlGroup, InputGroup, Card, Elevation\n} from \"@blueprintjs/core\";\n\ninterface GameConsoleProps {\n    recentEvents?: any\n    sendAction: any\n    setName: any\n    sourceAreaId: number\n    targetAreaId: number\n    targetAreaName: string\n    strUsed: string\n    saveMap: any\n    loadMap: any\n    playerid: string\n}\ninterface GameConsoleState {\n    myName: string\n    action: string\n    mainAreaId: string\n    targetAreaId: string\n    unitsUsed: string\n    scenarioName: string\n}\n\n\nexport class GameConsole extends React.PureComponent<GameConsoleProps, GameConsoleState> {\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            myName: \"\",\n            action: \"\",\n            mainAreaId: \"\",\n            targetAreaId: \"\",\n            unitsUsed: \"0\",\n            scenarioName: \"\"\n        };\n    }    \n\n    handleMyNameChange = (event:any) => {\n        this.setState({myName:event.target.value});\n    }\n    handleScenarioNameChange = (event:any) => {\n      this.setState({scenarioName:event.target.value});\n    }\n    handleActionChange = (event:any) => {\n        this.setState({action:event.target.value});\n    }\n    handlemainAreaIdChange = (event:any) => {\n        this.setState({mainAreaId:event.target.value});\n    }\n    handletargetAreaIdChange = (event:any) => {\n        this.setState({targetAreaId:event.target.value});\n    }\n    handleunitsUsedChange = (event:any) => {\n        this.setState({unitsUsed:event.target.value});\n    }\n    handleClick = (event:any) => {\n        this.props.sendAction(this.state.action, this.props.sourceAreaId.toString(), this.props.targetAreaId.toString(), this.state.unitsUsed);\n    }\n    handleNameClick = (event:any) => {\n        this.props.setName(this.state.myName);\n    }\n\n    handleBasicChange = (event:any) => {\n      \n    }\n    handleMapSave = (event:any) => {\n      this.props.saveMap(this.state.scenarioName);\n    }\n    handleMapLoad = (event:any) => {\n      this.props.loadMap(this.state.scenarioName);\n    }\n    \n    \n\n  public render() {\n\n    let greetingsBlock = (\n      <></>\n    );\n\n    let scenariosBlock= (\n      <></>\n    );\n\n    if(!this.props.playerid){\n      greetingsBlock = (\n      <>\n        <FormGroup\n          label=\"My Name:\"\n          labelFor=\"text-input\"\n          inline={true}\n        >\n          <ControlGroup\n            fill={true}\n            vertical={false}\n          >\n            <InputGroup placeholder=\"Name?\" \n              style={{ width:\"9em\" }}\n              onChange={this.handleMyNameChange}\n            />\n          </ControlGroup>\n        </FormGroup>\n        <Button\n          icon=\"arrow-left\"\n          text=\"Set Name\"\n          onClick={this.handleNameClick}\n        />\n      </>\n      );\n\n      scenariosBlock = (\n        <>\n        <FormGroup\n          label=\"Scenario name\"\n          labelFor=\"text-input\"\n          inline={true}\n        >\n          <ControlGroup\n            fill={true}\n            vertical={false}\n          >\n            <InputGroup placeholder=\"a-zA-Z\" \n              style={{ width:\"9em\" }}\n              onChange={this.handleScenarioNameChange}\n            />\n          </ControlGroup>\n        </FormGroup>\n        <Button\n          icon=\"arrow-left\"\n          text=\"Save Map\"\n          onClick={this.handleMapSave}\n          />\n        <Button\n          icon=\"arrow-left\"\n          text=\"Load Map\"\n          onClick={this.handleMapLoad}\n          />\n      </>\n      );\n    }\n\n    return (\n    <>\n        <Card interactive={true} elevation={Elevation.TWO}>\n            <br/>\n            {greetingsBlock}\n            <FormGroup\n                label=\"Action:\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"Action\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleActionChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Main area ID\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"area ID\" \n                    style={{ width:\"9em\" }}\n                    value={this.props.sourceAreaId.toString()}\n                    onChange={this.handleBasicChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Target area ID\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"area ID\" \n                    style={{ width:\"9em\" }}\n                    value={this.props.targetAreaId.toString()}\n                    onChange={this.handleBasicChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Units Used\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"1-100\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleunitsUsedChange}\n                    value={this.state.unitsUsed}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <Button\n                icon=\"arrow-left\"\n                text=\"Send\"\n                onClick={this.handleClick}\n                />\n              {scenariosBlock}\n        </Card>\n        <Card interactive={true} elevation={Elevation.TWO}>\n            {this.props.recentEvents.map((text:any, id:number) => (\n            <div key={id}>{text}</div>\n          ))}\n        </Card>\n    </>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Navbar, NavbarGroup, NavbarHeading, NavbarDivider, Alignment } from \"@blueprintjs/core\";\n\n\ninterface TopPanelProps {\n    activePlayer: string\n    currentPhase: string\n    yourName: string\n}\n\nexport class TopPanel extends React.PureComponent<TopPanelProps> {\n  public render() {\n    return (\n        <Navbar>\n            <NavbarGroup align={Alignment.LEFT}>\n            <NavbarHeading>Yout Name: {this.props.yourName}</NavbarHeading>\n                <NavbarDivider />\n                <NavbarHeading>Active Player: {this.props.activePlayer}</NavbarHeading>\n                <NavbarDivider />\n                <NavbarHeading>Current phase: {this.props.currentPhase}</NavbarHeading>\n            </NavbarGroup>\n        </Navbar>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n    Card, Elevation\n} from \"@blueprintjs/core\";\n\ninterface PlayersAreaProps {\n    players: any\n}\ninterface PlayersAreaState {\n\n}\n\nexport class PlayersArea extends React.PureComponent<PlayersAreaProps, PlayersAreaState> {\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            myName: \"\",\n            action: \"\",\n            mainAreaId: \"\",\n            targetAreaId: \"\",\n            unitsUsed: \"0\",\n            scenarioName: \"\"\n        };\n    }        \n    \n\n  public render() {\n    return (\n    <>\n        <Card interactive={true} elevation={Elevation.TWO}>\n            {this.props.players.map((player:any, id:number) => (\n            <div key={id}>{player.name} with id [{player.id}]</div>\n          ))}\n        </Card>\n    </>\n    );\n  }\n}\n","import axios from 'axios';\n\nexport interface javaData {\n data:any\n}\n\nconst apiClient = axios.create({\n  baseURL: '/',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n\nfunction gup( name:string ) {\n  const url = document.location.href;\n  name = name.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n  var regexS = \"[\\\\?&]\"+name+\"=([^&#]*)\";\n  var regex = new RegExp( regexS );\n  var results = regex.exec( url );\n  return results == null ? null : results[1];\n}\n\nexport const getScenarioData = async(name:string) => {\n\n  try {\n    let url ='/loadmap/?name='+name;\n\n    const response = await apiClient.get<any>(url);\n    const data = response.data;\n\n    return data;\n  } catch (err) {\n    if (err && err.response) {\n      return err.response;\n    }\n    throw err;\n  }\n};\n\n\nexport const sendMyName = async(name:string) => {\n\n  try {\n    let url ='/my_name_is/?name='+name;\n\n    const response = await apiClient.get<any>(url);\n    const data = response.data;\n\n    return data;\n  } catch (err) {\n    if (err && err.response) {\n      return err.response;\n    }\n    throw err;\n  }\n};","import React from 'react';\n\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport { Map } from './Map'\nimport { GameConsole } from './GameConsole'\nimport { TopPanel } from './TopPanel'\nimport { PlayersArea } from './PlayersArea'\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { Spinner } from '@blueprintjs/core';\n\nimport SockJS from 'sockjs-client';\n// @ts-ignore\nimport Stomp from 'stomp-websocket';\nimport { getScenarioData, sendMyName } from './javaapi';\n\n\ninterface riskclientProps {\n}\n\ninterface riskclientState {\n  loaded: boolean\n  areas: Array<any>\n  logdata: Array<string>\n  players: Array<any>\n  \n  selectedAreaId: number\n  targetAreas: Array<number>\n  sourceAreaId: string\n  targetAreaName: string\n  targetAreaId: number\n\n  game_id: string\n  last_message_id: string\n  player_id: string\n  active_player: string\n  current_phase: string\n\n  strCurrentlyUsed: string\n\n}\n\nclass Riskclient extends React.Component<riskclientProps, riskclientState> {\n  stompClient:any = null;\n\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      loaded: false,\n      players: [],\n      logdata:[\"Log lines goes here\",\"This is the first line\"],\n      \n      game_id: \"\",\n      player_id: \"\",\n      active_player: \"\",\n      current_phase: \"\",\n\n      sourceAreaId: \"click-on-map\",\n      targetAreaId: 999,\n      targetAreaName: \"click-on-map\",\n\n      strCurrentlyUsed: \"0\",\n      selectedAreaId: 999,\n      targetAreas: [],\n      \n\n      last_message_id: \"\",\n\n      areas:[\n        {\"id\":0,\"x\":42,\"y\":62, \"str\":12, \"color\":\"red\", \"links\":[]},\n        {\"id\":1,\"x\":109,\"y\":62, \"str\":1, \"color\":\"green\", \"links\":[]},\n        {\"id\":2,\"x\":277,\"y\":67, \"str\":3, \"color\":\"green\", \"links\":[]},\n        {\"id\":3,\"x\":110,\"y\":145, \"str\":2, \"color\":\"grey\", \"links\":[]},\n        {\"id\":4,\"x\":167,\"y\":124, \"str\":6, \"color\":\"red\", \"links\":[]},\n        {\"id\":5,\"x\":229,\"y\":117, \"str\":6, \"color\":\"red\", \"links\":[]},\n        {\"id\":6,\"x\":113,\"y\":208, \"str\":4, \"color\":\"green\", \"links\":[]},\n        {\"id\":7,\"x\":185,\"y\":185, \"str\":4, \"color\":\"green\", \"links\":[]},\n        {\"id\":8,\"x\":154,\"y\":263, \"str\":5, \"color\":\"grey\", \"links\":[]},\n      \n        {\"id\":9,\"x\":187,\"y\":295, \"str\":5, \"color\":\"yellow\", \"links\":[]},\n        {\"id\":10,\"x\":210,\"y\":352, \"str\":5, \"color\":\"yellow\", \"links\":[]},\n        {\"id\":11,\"x\":165,\"y\":385, \"str\":5, \"color\":\"yellow\", \"links\":[]},\n        {\"id\":12,\"x\":197,\"y\":485, \"str\":5, \"color\":\"yellow\", \"links\":[]},\n      \n        {\"id\":13,\"x\":347,\"y\":90, \"str\":2, \"color\":\"red\"},\n        {\"id\":14,\"x\":320,\"y\":145, \"str\":4, \"color\":\"red\"},\n        {\"id\":15,\"x\":400,\"y\":85, \"str\":4, \"color\":\"red\"},\n        {\"id\":16,\"x\":320,\"y\":250, \"str\":4, \"color\":\"red\"},\n        {\"id\":17,\"x\":385,\"y\":200, \"str\":4, \"color\":\"red\"},\n        {\"id\":18,\"x\":470,\"y\":170, \"str\":22, \"color\":\"green\"},\n        {\"id\":19,\"x\":425,\"y\":257, \"str\":4, \"color\":\"green\"},\n      \n        {\"id\":20,\"x\":620,\"y\":115, \"str\":1, \"color\":\"green\"},\n        {\"id\":21,\"x\":665,\"y\":80, \"str\":1, \"color\":\"green\"},\n        {\"id\":22,\"x\":710,\"y\":100, \"str\":99, \"color\":\"grey\"},\n        {\"id\":23,\"x\":646,\"y\":148, \"str\":2, \"color\":\"blue\"},\n        {\"id\":24,\"x\":700,\"y\":170, \"str\":2, \"color\":\"blue\"},\n        {\"id\":25,\"x\":770,\"y\":165, \"str\":2, \"color\":\"blue\"},\n        {\"id\":26,\"x\":555,\"y\":225, \"str\":3, \"color\":\"red\"},\n        {\"id\":27,\"x\":625,\"y\":220, \"str\":3, \"color\":\"yellow\"},\n        {\"id\":28,\"x\":510,\"y\":310, \"str\":8, \"color\":\"yellow\"},\n        {\"id\":29,\"x\":610,\"y\":325, \"str\":8, \"color\":\"blue\"},\n        {\"id\":30,\"x\":685,\"y\":340, \"str\":2, \"color\":\"blue\"},\n        {\"id\":31,\"x\":570,\"y\":105, \"str\":11, \"color\":\"green\"},\n        \n        {\"id\":32,\"x\":690,\"y\":430, \"str\":1, \"color\":\"blue\"},\n        {\"id\":33,\"x\":755,\"y\":370, \"str\":2, \"color\":\"grey\"},\n        {\"id\":34,\"x\":725,\"y\":470, \"str\":2, \"color\":\"blue\"},\n        {\"id\":35,\"x\":760,\"y\":445, \"str\":2, \"color\":\"blue\"},\n      \n        {\"id\":36,\"x\":375,\"y\":325, \"str\":2, \"color\":\"grey\"},\n        {\"id\":37,\"x\":430,\"y\":310, \"str\":2, \"color\":\"grey\"},\n        {\"id\":38,\"x\":470,\"y\":360, \"str\":2, \"color\":\"grey\"},\n        {\"id\":39,\"x\":445,\"y\":408, \"str\":2, \"color\":\"grey\"},\n        {\"id\":40,\"x\":445,\"y\":520, \"str\":2, \"color\":\"grey\"},\n        {\"id\":41,\"x\":540,\"y\":510, \"str\":2, \"color\":\"grey\"},\n      \n        {\"id\":42,\"x\":795,\"y\":505, \"str\":5, \"color\":\"blue\"}\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.riskServerConnect();\n  }\n\n  showGreeting = (data:any) => {\n\n  }\n\n  doAction = (player: string, action: string, base_area_id: string, target_area_id: string, units_used: number) => {\n\n  }\n\n  riskServerConnect = () => {\n    var socket = new SockJS('/gs-guide-websocket');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, (frame:any) => {\n        this.stompClient.subscribe('/topic/greetings', (d:any) => {\n            const txt = JSON.parse(d.body).content;\n\n            /*\n            const newGameState:any = JSON.parse(d.body).game;\n            this.setState({\n              areas: newGameState.areas,\n              players: newGameState.players,\n              current_phase: newGameState.currentPhase,\n            });\n\n            this.showGreeting(txt);\n            */\n\n            this.log_communication(' < GREETING: ' + txt);\n        });\n    });\n    this.setState({loaded: true});\n  }\n\n  riskServerDisconnect = () => {\n    if (this.stompClient !== null) {\n        this.stompClient.disconnect();\n    }\n  }\n\n  log_communication = (txt: string) => {\n    const dx = this.state.logdata.slice();\n    dx.unshift(txt);\n    this.setState({logdata:dx});\n  }\n\n  server_sendName_old = (name:string) => {\n    this.stompClient.send(\"/app/hello\", {}, JSON.stringify({'name': name}));\n    this.log_communication(' > NAME: '+name);\n  }\n  server_sendName = (name:string) => {\n    sendMyName(name).then((data:any) => {\n      if(data.game.id){\n        this.stompClient.subscribe('/topic/game/' + data.game.id + '/actions', (d:any) => {\n          const newAction = JSON.parse(d.body);\n          this.doAction(newAction.player, newAction.action, newAction.area, '', 0);\n          this.log_communication(' < '+newAction.playerId+': ACTION['+newAction.action+']: area[' + newAction.area+'], targetArea['+newAction.targetArea+'], units['+newAction.units+'],');\n        });\n\n        this.stompClient.subscribe('/topic/game/' + data.game.id + '/greetings', (d:any) => {\n          const greeting = JSON.parse(d.body);\n          this.log_communication(' < Player joined [' + greeting.name + '] [ '+ greeting.playersNow +' / ' + greeting.playersNeed + ']');\n        });\n\n        this.log_communication(' < Game State [' + data.game.id + ']');\n\n        this.setState({\n          areas: data.game.areas,\n          players: data.game.players,\n          current_phase: data.game.currentPhase,\n          game_id: data.game.id\n        });\n      }\n    });\n\n    this.log_communication(' > NAME: '+name);\n  }\n  server_sendAction = (action:string, area:string, target_area: string, units: number) => {\n    this.log_communication(' > '+this.state.player_id+': ACTION['+action+']: area['+area+'] target_area['+target_area+'] units['+units+']');\n    this.stompClient.send(\"/app/do/\" + this.state.game_id, {}, JSON.stringify({'playerId':this.state.player_id, 'action': action, 'area': area, 'targetArea':target_area, 'units':units}));\n  }\n\n  saveMap = (name:string) => {\n    this.log_communication(' > SAVE MAP');\n    this.stompClient.send(\"/app/savemap\", {}, JSON.stringify({\"areas\":this.state.areas, \"name\":name}));\n  }\n  loadMap = (name:string) => {\n    this.log_communication(' > LOAD MAP');\n\n    getScenarioData(name).then((data:any)=>{\n      console.log(data);\n      if(data.areas && data.areas.length>0){\n        this.setState({areas:data.areas});\n      }\n    });\n    \n    /*\n    var data:any = this.stompClient.send(\"/app/loadmap\", {}, JSON.stringify({\"value\":name}));\n    console.log(data);\n    if(data.areas && data.areas.length>0){\n      this.setState({areas:data.areas});\n    }\n    */\n  }\n\n  setUserName = (name:string) => {\n    this.setState({player_id:name});\n    this.server_sendName(name);\n  }\n\n  /* handle area click for scenario editor */\n  handleAreaClick = (idx:number, str:string) => {\n    if(this.state.selectedAreaId == idx){\n      const newLinks = this.state.targetAreas;\n      const areas = this.state.areas.slice();\n      areas[this.state.selectedAreaId].links = newLinks;\n      this.setState({\n        \"sourceAreaId\":\"\",\n        \"strCurrentlyUsed\": \"0\",\n        \"selectedAreaId\": 999,\n        \"areas\":areas,\n        \"targetAreas\":[],\n      });\n    }\n    else if(this.state.selectedAreaId == 999){\n      this.setState({\n        \"sourceAreaId\":\"area\"+idx,\n        \"strCurrentlyUsed\": str,\n        \"selectedAreaId\": idx,\n        \"targetAreas\":(this.state.areas[idx].links?this.state.areas[idx].links:[])\n      });\n    }\n    else{\n      const linked = this.state.targetAreas.slice();\n      if(linked.includes(idx)){\n        for( var i = 0; i < linked.length; i++){ \n          if ( linked[i] === idx) {\n            linked.splice(i, 1); \n          }\n       }\n      }\n      else{\n        linked.push(idx);\n      }\n\n      this.setState({targetAreas:linked});\n    }\n  }\n\n  /* handle area click for game editor */\n  handleGameAreaClick = (idx:number, str:string) => {\n    if(this.state.selectedAreaId == idx){\n      const newLinks = this.state.targetAreas;\n      const areas = this.state.areas.slice();\n      areas[this.state.selectedAreaId].links = newLinks;\n      this.setState({\n        \"sourceAreaId\":\"\",\n        \"strCurrentlyUsed\": \"0\",\n        \"selectedAreaId\": 999,\n        \"areas\":areas,\n        \"targetAreas\":[],\n        \"targetAreaName\":\"\",\n        \"targetAreaId\":999,\n      });\n    }\n    else if(this.state.selectedAreaId == 999){\n      this.setState({\n        \"sourceAreaId\":\"area\"+idx,\n        \"strCurrentlyUsed\": str,\n        \"selectedAreaId\": idx,\n        \"targetAreas\":(this.state.areas[idx].links?this.state.areas[idx].links:[]),\n        \"targetAreaName\":\"\",\n        \"targetAreaId\":999,\n      });\n    }\n    else{\n      const linked = this.state.targetAreas.slice();\n      if(linked.includes(idx)){\n        // valid target\n\n        this.setState({\n          \"targetAreaName\":\"area\"+idx,\n          \"targetAreaId\":idx,\n        });\n      }\n    }\n  }\n\n\n  render(){\n\n    let mapArea;\n    let consoleArea;\n    let TopPanelArea;\n    let playersArea;\n\n    if(this.state.loaded){\n      mapArea = (\n         <Map\n            areas={this.state.areas}\n            handleAreaClick={this.state.player_id?this.handleGameAreaClick:this.handleAreaClick}\n            selectedArea={this.state.selectedAreaId}\n            targetAreas={this.state.targetAreas}\n            targetAreaId={this.state.targetAreaId}\n         />\n      );\n      consoleArea = (\n        <GameConsole\n          recentEvents={this.state.logdata}\n          sendAction={this.server_sendAction}\n          setName={this.setUserName}\n          sourceAreaId={this.state.selectedAreaId}\n          targetAreaId={this.state.targetAreaId}\n          targetAreaName={this.state.targetAreaName}\n          strUsed={this.state.strCurrentlyUsed}\n          saveMap={this.saveMap}\n          loadMap={this.loadMap}\n          playerid={this.state.player_id}\n        />\n      );\n      TopPanelArea = (\n        <TopPanel\n          yourName={this.state.player_id}\n          activePlayer={this.state.active_player}\n          currentPhase={this.state.current_phase}\n        />\n      );\n\n      playersArea = (\n        <PlayersArea\n          players={this.state.players}\n        />\n      )\n    }\n    else{\n      mapArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n      consoleArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n      TopPanelArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n\n      playersArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n      <Grid fluid>\n        <Row>\n          <Col xs={1} />\n          <Col xs={11}>\n            {TopPanelArea}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={1}>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </Col>\n          <Col xs={8}> \n            {mapArea}\n          </Col>\n          <Col xs={3}>\n            {consoleArea}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={1} />\n          <Col xs={11}>\n            {playersArea}\n          </Col>\n        </Row>\n      </Grid>\n  </div>\n    );\n  }\n}\n\nexport default Riskclient;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Riskclient from './Riskclient';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Riskclient />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}