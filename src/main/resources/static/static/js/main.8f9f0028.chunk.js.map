{"version":3,"sources":["Area.tsx","Map.tsx","GameConsole.tsx","TopPanel.tsx","Riskclient.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Area","props","myRef","hClick","e","handleClick","areaId","str","updateCanvas","ctx","current","getContext","globalAlpha","clearRect","fillStyle","color","arc","Math","PI","fill","font","plus","strokeText","React","createRef","this","ref","width","height","className","style","x","y","onClick","Component","Map","id","src","areas","map","area","parseInt","handleAreaClick","GameConsole","handleMyNameChange","event","setState","myName","target","value","handleActionChange","action","handlemainAreaIdChange","mainAreaId","handletargetAreaIdChange","targetAreaId","handleunitsUsedChange","unitsUsed","sendAction","state","sourceAreaId","handleNameClick","setName","interactive","elevation","Elevation","TWO","label","labelFor","inline","vertical","placeholder","onChange","icon","text","strUsed","recentEvents","key","TopPanel","align","Alignment","LEFT","yourName","activePlayer","currentPhase","Riskclient","stompClient","showGreeting","data","doAction","player","base_area_id","target_area_id","units_used","riskServerConnect","socket","SockJS","Stomp","over","connect","frame","subscribe","d","txt","JSON","parse","body","content","newGameState","gameState","console","log","log_communication","newAction","playerId","targetArea","units","loaded","riskServerDisconnect","disconnect","dx","logdata","slice","unshift","server_sendName","name","send","stringify","server_sendAction","target_area","player_id","setUserName","idx","players","game_id","active_player","current_phase","strCurrentlyUsed","last_message_id","mapArea","consoleArea","TopPanelArea","fluid","xs","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8f9f0028.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface AreaProps {\n    areaId: number\n    color?: string\n    x: number\n    y: number\n    str: number\n    handleClick: any\n}\n\nexport class Area extends React.Component<AreaProps> {\n    myRef: any;\n    constructor(props:any) {\n        super(props);\n        this.myRef = React.createRef();\n    }  \n    componentDidMount() {\n        this.updateCanvas();\n    }\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    hClick = (e:any) => {\n        this.props.handleClick(this.props.areaId, this.props.str);\n    }\n\n    updateCanvas = () => {\n        const ctx = this.myRef.current.getContext('2d');\n        ctx.globalAlpha = 0.8;\n        ctx.clearRect(0,0, 30, 30);\n        ctx.fillStyle = this.props.color\n        //ctx.fillRect(this.props.x, this.props.y, 30, 30);\n        ctx.arc(15, 15, 15, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.font = '11px serif #00ff00';\n\n        let plus:number = 0;\n        if(this.props.str>9){\n            plus = 5;\n        }\n        else{\n            plus = 8;\n        }\n        ctx.strokeText(this.props.str, 4+plus, 19);\n    }\n\n    render() {\n        return (\n            <canvas ref={this.myRef} width={30} height={30} className={\"mapCanvas\"} style={{\"left\":this.props.x, \"top\":this.props.y}} onClick={this.hClick}/>\n        );\n   }\n}","import * as React from \"react\";\nimport {\n    Button\n} from \"@blueprintjs/core\";\nimport { Area } from './Area'\n\nimport { Row, Col } from 'react-flexbox-grid';\n\n\ninterface MapProps {\n  areas: Array<any>\n  handleAreaClick: any\n}\n\nexport class Map extends React.PureComponent<MapProps> {\n  /*\n            <Button\n                rightIcon=\"arrow-left\"\n                text=\"Preču Šabloni\"\n            />*/\n  \n\n      \n  public render() {\n    return (\n<div id={\"mapID\"}>\n      <img src=\"map.jpg\"/>\n      {this.props.areas.map((area:any, id:number) => (\n      <Area\n        color={area.color}\n        x={parseInt(area.x)}\n        y={parseInt(area.y)}\n        str={area.str}\n        areaId={area.id}\n        handleClick={this.props.handleAreaClick}\n      />\n     ))}\n</div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n    Button, FormGroup, ControlGroup, InputGroup, Card, Elevation\n} from \"@blueprintjs/core\";\n\nimport { Row, Col } from 'react-flexbox-grid';\n\n\ninterface GameConsoleProps {\n    recentEvents?: any\n    sendAction: any\n    setName: any\n    sourceAreaId: string\n    strUsed: string\n}\ninterface GameConsoleState {\n    myName: string\n    action: string\n    mainAreaId: string\n    targetAreaId: string\n    unitsUsed: string\n}\n\n\nexport class GameConsole extends React.PureComponent<GameConsoleProps, GameConsoleState> {\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            myName: \"\",\n            action: \"\",\n            mainAreaId: \"\",\n            targetAreaId: \"\",\n            unitsUsed: \"0\"\n        };\n    }    \n\n    handleMyNameChange = (event:any) => {\n        this.setState({myName:event.target.value});\n    }\n\n    handleActionChange = (event:any) => {\n        this.setState({action:event.target.value});\n    }\n    handlemainAreaIdChange = (event:any) => {\n        this.setState({mainAreaId:event.target.value});\n    }\n    handletargetAreaIdChange = (event:any) => {\n        this.setState({targetAreaId:event.target.value});\n    }\n    handleunitsUsedChange = (event:any) => {\n        this.setState({unitsUsed:event.target.value});\n    }\n    handleClick = (event:any) => {\n        this.props.sendAction(this.state.action, this.props.sourceAreaId, this.state.targetAreaId, this.state.unitsUsed);\n    }\n    handleNameClick = (event:any) => {\n        this.props.setName(this.state.myName);\n    }\n\n    \n\n  public render() {\n\n\n    return (\n    <>\n        <Card interactive={true} elevation={Elevation.TWO}>\n            <br/>\n            <FormGroup\n                label=\"My Name:\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"Name?\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleMyNameChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <Button\n                icon=\"arrow-left\"\n                text=\"Set Name\"\n                onClick={this.handleNameClick}\n                />\n            <FormGroup\n                label=\"Action:\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"Action\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleActionChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Main area ID\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"area ID\" \n                    style={{ width:\"9em\" }}\n                    value={this.props.sourceAreaId}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Target area ID\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"area ID\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handletargetAreaIdChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Units Used\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"1-100\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleunitsUsedChange}\n                    value={this.props.strUsed}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <Button\n                icon=\"arrow-left\"\n                text=\"Send\"\n                onClick={this.handleClick}\n                />\n        </Card>\n        <Card interactive={true} elevation={Elevation.TWO}>\n            {this.props.recentEvents.map((text:any, id:number) => (\n            <div key={id}>{text}</div>\n          ))}\n        </Card>\n    </>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Row, Col } from 'react-flexbox-grid';\nimport { Navbar, NavbarGroup, NavbarHeading, NavbarDivider, Alignment } from \"@blueprintjs/core\";\n\n\ninterface TopPanelProps {\n    activePlayer: string\n    currentPhase: string\n    yourName: string\n}\n\nexport class TopPanel extends React.PureComponent<TopPanelProps> {\n  public render() {\n    return (\n        <Navbar>\n            <NavbarGroup align={Alignment.LEFT}>\n            <NavbarHeading>Yout Name: {this.props.yourName}</NavbarHeading>\n                <NavbarDivider />\n                <NavbarHeading>Active Player: {this.props.activePlayer}</NavbarHeading>\n                <NavbarDivider />\n                <NavbarHeading>Current phase: {this.props.currentPhase}</NavbarHeading>\n            </NavbarGroup>\n        </Navbar>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport { Map } from './Map'\nimport { GameConsole } from './GameConsole'\nimport { TopPanel } from './TopPanel'\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { Spinner } from '@blueprintjs/core';\n\nimport SockJS from 'sockjs-client';\n// @ts-ignore\nimport Stomp from 'stomp-websocket';\n\n\n\ninterface riskclientProps {\n}\n\ninterface riskclientState {\n  loaded: boolean\n  areas: Array<any>\n  logdata: Array<string>\n  players: Array<any>\n  \n  game_id: string\n  last_message_id: string\n  player_id: string\n  active_player: string\n  current_phase: string\n\n  sourceAreaId: string\n  strCurrentlyUsed: string\n\n}\n\nclass Riskclient extends React.Component<riskclientProps, riskclientState> {\n  stompClient:any = null;\n\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      loaded: false,\n      players: [],\n      logdata:[\"Log lines goes here\",\"This is the first line\"],\n      \n      game_id: \"\",\n      player_id: \"\",\n      active_player: \"\",\n      current_phase: \"\",\n\n      sourceAreaId: \"click-on-map\",\n      strCurrentlyUsed: \"0\",\n\n      last_message_id: \"\",\n\n      areas:[]\n    };\n  }\n\n  componentDidMount() {\n    this.riskServerConnect();\n  }\n\n  showGreeting = (data:any) => {\n\n  }\n\n  doAction = (player: string, action: string, base_area_id: string, target_area_id: string, units_used: number) => {\n\n  }\n\n  riskServerConnect = () => {\n    var socket = new SockJS('/gs-guide-websocket');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, (frame:any) => {\n        this.stompClient.subscribe('/topic/greetings', (d:any) => {\n            const txt = JSON.parse(d.body).content;\n\n            const newGameState:any = JSON.parse(d.body).gameState;\n            this.setState({areas:newGameState.areas});\n\n            console.log(newGameState.areas);\n            \n            this.showGreeting(txt);\n            this.log_communication(' < GREETING: ' + txt);\n        });\n        this.stompClient.subscribe('/topic/actions', (d:any) => {\n            const newAction = JSON.parse(d.body);\n            this.doAction(newAction.player, newAction.action, newAction.area, '', 0);\n            this.log_communication(' < '+newAction.playerId+': ACTION['+newAction.action+']: area[' + newAction.area+'], targetArea['+newAction.targetArea+'], units['+newAction.units+'],');\n        });\n    });\n    this.setState({loaded: true});\n  }\n\n  riskServerDisconnect = () => {\n    if (this.stompClient !== null) {\n        this.stompClient.disconnect();\n    }\n  }\n\n  log_communication = (txt: string) => {\n    const dx = this.state.logdata.slice();\n    dx.unshift(txt);\n    this.setState({logdata:dx});\n  }\n\n  server_sendName = (name:string) => {\n    this.stompClient.send(\"/app/hello\", {}, JSON.stringify({'name': name}));\n    this.log_communication(' > NAME: '+name);\n  }\n  server_sendAction = (action:string, area:string, target_area: string, units: number) => {\n    this.log_communication(' > '+this.state.player_id+': ACTION['+action+']: area['+area+'] target_area['+target_area+'] units['+units+']');\n    this.stompClient.send(\"/app/do\", {}, JSON.stringify({'playerId':this.state.player_id, 'action': action, 'area': area, 'targetArea':target_area, 'units':units}));\n  }\n\n  setUserName = (name:string) => {\n    this.setState({player_id:name});\n    this.server_sendName(name);\n  }\n\n  handleAreaClick = (idx:number, str:string) => {\n    this.setState({\"sourceAreaId\":\"area\"+idx, \"strCurrentlyUsed\": str});\n  }\n\n  render(){\n\n    let mapArea;\n    let consoleArea;\n    let TopPanelArea;\n\n    if(this.state.loaded){\n      mapArea = (\n         <Map\n            areas={this.state.areas}\n            handleAreaClick={this.handleAreaClick}\n         />\n      );\n      consoleArea = (\n        <GameConsole\n          recentEvents={this.state.logdata}\n          sendAction={this.server_sendAction}\n          setName={this.setUserName}\n          sourceAreaId={this.state.sourceAreaId}\n          strUsed={this.state.strCurrentlyUsed}\n        />\n      );\n      TopPanelArea = (\n        <TopPanel\n          yourName={this.state.player_id}\n          activePlayer={this.state.active_player}\n          currentPhase={this.state.current_phase}\n        />\n      );\n    }\n    else{\n      mapArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n      consoleArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n      TopPanelArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n      <Grid fluid>\n        <Row>\n          <Col xs={1} />\n          <Col xs={11}>\n            {TopPanelArea}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={1}>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </Col>\n          <Col xs={8}> \n            {mapArea}\n          </Col>\n          <Col xs={3}>\n            {consoleArea}\n          </Col>\n        </Row>\n      </Grid>\n  </div>\n    );\n  }\n}\n\nexport default Riskclient;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Riskclient from './Riskclient';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Riskclient />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}