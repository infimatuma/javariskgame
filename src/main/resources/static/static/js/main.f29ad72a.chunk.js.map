{"version":3,"sources":["Map.tsx","GameConsole.tsx","TopPanel.tsx","Riskclient.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Map","src","React","GameConsole","props","handleMyNameChange","event","setState","myName","target","value","handleActionChange","action","handlemainAreaIdChange","mainAreaId","handletargetAreaIdChange","targetAreaId","handleunitsUsedChange","unitsUsed","handleClick","sendAction","state","handleNameClick","setName","interactive","elevation","Elevation","TWO","label","labelFor","inline","fill","vertical","placeholder","style","width","onChange","this","icon","text","onClick","recentEvents","map","id","key","TopPanel","align","Alignment","LEFT","yourName","activePlayer","currentPhase","Riskclient","stompClient","showGreeting","data","doAction","player","base_area_id","target_area_id","units_used","riskServerConnect","socket","SockJS","Stomp","over","connect","frame","subscribe","d","txt","JSON","parse","body","content","log_communication","newAction","area","playerId","targetArea","units","loaded","riskServerDisconnect","disconnect","dx","logdata","slice","unshift","server_sendName","name","send","stringify","server_sendAction","target_area","player_id","setUserName","areas","players","game_id","active_player","current_phase","last_message_id","mapArea","consoleArea","TopPanelArea","className","fluid","xs","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f29ad72a.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n    Button\n} from \"@blueprintjs/core\";\n\nimport { Row, Col } from 'react-flexbox-grid';\n\n\ninterface MapProps {\n    \n}\n\nexport class Map extends React.PureComponent<MapProps> {\n  /*\n            <Button\n                rightIcon=\"arrow-left\"\n                text=\"Preču Šabloni\"\n            />*/\n      \n  public render() {\n    return (\n<>\n      <img src=\"map.jpg\"/>\n</>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n    Button, FormGroup, ControlGroup, InputGroup, Card, Elevation\n} from \"@blueprintjs/core\";\n\nimport { Row, Col } from 'react-flexbox-grid';\n\n\ninterface GameConsoleProps {\n    recentEvents?: any\n    sendAction: any\n    setName: any\n}\ninterface GameConsoleState {\n    myName: string\n    action: string\n    mainAreaId: string\n    targetAreaId: string\n    unitsUsed: number\n}\n\n\nexport class GameConsole extends React.PureComponent<GameConsoleProps, GameConsoleState> {\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            myName: \"\",\n            action: \"\",\n            mainAreaId: \"\",\n            targetAreaId: \"\",\n            unitsUsed: 0\n        };\n    }    \n\n    handleMyNameChange = (event:any) => {\n        this.setState({myName:event.target.value});\n    }\n\n    handleActionChange = (event:any) => {\n        this.setState({action:event.target.value});\n    }\n    handlemainAreaIdChange = (event:any) => {\n        this.setState({mainAreaId:event.target.value});\n    }\n    handletargetAreaIdChange = (event:any) => {\n        this.setState({targetAreaId:event.target.value});\n    }\n    handleunitsUsedChange = (event:any) => {\n        this.setState({unitsUsed:event.target.value});\n    }\n    handleClick = (event:any) => {\n        this.props.sendAction(this.state.action, this.state.mainAreaId, this.state.targetAreaId, this.state.unitsUsed);\n    }\n    handleNameClick = (event:any) => {\n        this.props.setName(this.state.myName);\n    }\n\n    \n\n  public render() {\n\n\n    return (\n    <>\n        <Card interactive={true} elevation={Elevation.TWO}>\n            <br/>\n            <FormGroup\n                label=\"My Name:\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"Name?\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleMyNameChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <Button\n                icon=\"arrow-left\"\n                text=\"Set Name\"\n                onClick={this.handleNameClick}\n                />\n            <FormGroup\n                label=\"Action:\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"Action\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleActionChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Main area ID\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"area ID\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handlemainAreaIdChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Target area ID\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"area ID\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handletargetAreaIdChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <FormGroup\n                label=\"Units Used\"\n                labelFor=\"text-input\"\n                inline={true}\n              >\n                <ControlGroup\n                  fill={true}\n                  vertical={false}\n                >\n                  <InputGroup placeholder=\"1-100\" \n                    style={{ width:\"9em\" }}\n                    onChange={this.handleunitsUsedChange}\n                  />\n                </ControlGroup>\n              </FormGroup>\n              <Button\n                icon=\"arrow-left\"\n                text=\"Send\"\n                onClick={this.handleClick}\n                />\n        </Card>\n        <Card interactive={true} elevation={Elevation.TWO}>\n            {this.props.recentEvents.map((text:any, id:number) => (\n            <div key={id}>{text}</div>\n          ))}\n        </Card>\n    </>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Row, Col } from 'react-flexbox-grid';\nimport { Navbar, NavbarGroup, NavbarHeading, NavbarDivider, Alignment } from \"@blueprintjs/core\";\n\n\ninterface TopPanelProps {\n    activePlayer: string\n    currentPhase: string\n    yourName: string\n}\n\nexport class TopPanel extends React.PureComponent<TopPanelProps> {\n  public render() {\n    return (\n        <Navbar>\n            <NavbarGroup align={Alignment.LEFT}>\n            <NavbarHeading>Yout Name: {this.props.yourName}</NavbarHeading>\n                <NavbarDivider />\n                <NavbarHeading>Active Player: {this.props.activePlayer}</NavbarHeading>\n                <NavbarDivider />\n                <NavbarHeading>Current phase: {this.props.currentPhase}</NavbarHeading>\n            </NavbarGroup>\n        </Navbar>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport { Map } from './Map'\nimport { GameConsole } from './GameConsole'\nimport { TopPanel } from './TopPanel'\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { Spinner } from '@blueprintjs/core';\n\nimport SockJS from 'sockjs-client';\n// @ts-ignore\nimport Stomp from 'stomp-websocket';\n\n\n\ninterface riskclientProps {\n}\n\ninterface riskclientState {\n  loaded: boolean\n  areas: Array<any>\n  logdata: Array<string>\n  players: Array<any>\n  \n  game_id: string\n  last_message_id: string\n  player_id: string\n  active_player: string\n  current_phase: string\n}\n\nclass Riskclient extends React.Component<riskclientProps, riskclientState> {\n  stompClient:any = null;\n\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      loaded: false,\n      areas: [],\n      players: [],\n      logdata:[\"Log lines goes here\",\"This is the first line\"],\n      \n      game_id: \"\",\n      player_id: \"\",\n      active_player: \"\",\n      current_phase: \"\",\n\n      last_message_id: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.riskServerConnect();\n  }\n\n  showGreeting = (data:any) => {\n\n  }\n\n  doAction = (player: string, action: string, base_area_id: string, target_area_id: string, units_used: number) => {\n\n  }\n\n  riskServerConnect = () => {\n    var socket = new SockJS('/gs-guide-websocket');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, (frame:any) => {\n        this.stompClient.subscribe('/topic/greetings', (d:any) => {\n            const txt = JSON.parse(d.body).content;\n            this.showGreeting(txt);\n            this.log_communication(' < GREETING: ' + txt);\n        });\n        this.stompClient.subscribe('/topic/actions', (d:any) => {\n            const newAction = JSON.parse(d.body);\n            this.doAction(newAction.player, newAction.action, newAction.area, '', 0);\n            this.log_communication(' < '+newAction.playerId+': ACTION['+newAction.action+']: area[' + newAction.area+'], targetArea['+newAction.targetArea+'], units['+newAction.units+'],');\n        });\n    });\n    this.setState({loaded: true});\n  }\n\n  riskServerDisconnect = () => {\n    if (this.stompClient !== null) {\n        this.stompClient.disconnect();\n    }\n  }\n\n  log_communication = (txt: string) => {\n    const dx = this.state.logdata.slice();\n    dx.unshift(txt);\n    this.setState({logdata:dx});\n  }\n\n  server_sendName = (name:string) => {\n    this.stompClient.send(\"/app/hello\", {}, JSON.stringify({'name': name}));\n    this.log_communication(' > NAME: '+name);\n  }\n  server_sendAction = (action:string, area:string, target_area: string, units: number) => {\n    this.log_communication(' > '+this.state.player_id+': ACTION['+action+']: area['+area+'] target_area['+target_area+'] units['+units+']');\n    this.stompClient.send(\"/app/do\", {}, JSON.stringify({'playerId':this.state.player_id, 'action': action, 'area': area, 'targetArea':target_area, 'units':units}));\n  }\n\n  setUserName = (name:string) => {\n    this.setState({player_id:name});\n    this.server_sendName(name);\n  }\n\n  render(){\n\n    let mapArea;\n    let consoleArea;\n    let TopPanelArea;\n\n    if(this.state.loaded){\n      mapArea = (\n         <Map\n\n         />\n      );\n      consoleArea = (\n        <GameConsole\n          recentEvents={this.state.logdata}\n          sendAction={this.server_sendAction}\n          setName={this.setUserName}\n        />\n      );\n      TopPanelArea = (\n        <TopPanel\n          yourName={this.state.player_id}\n          activePlayer={this.state.active_player}\n          currentPhase={this.state.current_phase}\n        />\n      );\n    }\n    else{\n      mapArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n      consoleArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n      TopPanelArea = (\n        <>\n          <Spinner/>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n      <Grid fluid>\n        <Row>\n          <Col xs={1} />\n          <Col xs={11}>\n            {TopPanelArea}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={1}>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </Col>\n          <Col xs={8}> \n            {mapArea}\n          </Col>\n          <Col xs={3}>\n            {consoleArea}\n          </Col>\n        </Row>\n      </Grid>\n  </div>\n    );\n  }\n}\n\nexport default Riskclient;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Riskclient from './Riskclient';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Riskclient />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}